#include <iostream>
#include <random>
#include <chrono>
#include <limits>

//clearing the buffer when user inputs too many characters
void ignoreLine()
{
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
}

//get a guess from user
int getInputInt(int counter)
{
    while(true)
    {
        std::cout << "Guess#" << counter << ": ";
        int input{};
        std::cin >> input;
        if (std::cin.fail())
        {
            std::cin.clear();
            ignoreLine();
            continue; 
        }
        ignoreLine();
        return input;
    }
}
//ask for a guess up to 'chances' number of times and compare to randomNumber
bool guessAndCompare(int randomNumber, int chances)
{
    for(int counter{1}; counter <= chances; ++counter)
        {
            int userGuess{ getInputInt( counter ) };

            if( userGuess == randomNumber)
                return true;
            else if( userGuess > randomNumber)
                std::cout << "Your guess is too high.\n";
            else
                std::cout << "Your guess is too low.\n";

        }
        return false;
}



bool playAgainQuery() //ask until the input is valid (y or n)
{
    while(true)
    {
        char choice{};
        std::cout << "Would you like to play again (y/n)? ";
        std::cin >> choice;
        ignoreLine(); //clear the buffer
        switch(choice)
        {
        case 'y': return true;
        case 'n': return false;
        }
    }
}


int main()
{
    //std::random_device rng;
    //std::seed_seq ss{ rng(), rng(), rng(), rng(), rng(), rng(), rng(), rng() };
    std::mt19937 mt{ static_cast<unsigned int>(
                    std::chrono::steady_clock::now().time_since_epoch().count()
                    ) };
    std::uniform_int_distribution die100{ 1, 100};
    constexpr int guessChances{7};
    do
    {
        std::cout << "Try to guess a number between 1 and 100. You have "
        << guessChances <<" tries.\n";

        //generate a random number
        int randomNumber{ die100(mt) };


        if(guessAndCompare(randomNumber, guessChances))
            std::cout << "Correct. You win!\n";
        else
            std::cout << "You lose. The correct number was "
                << randomNumber << '\n';


    }
    while ( playAgainQuery() );

    std::cout << "Thanks for playing!";

    return 0;
}
